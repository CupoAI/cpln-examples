kind: gvc
name: envoyproxy
description: envoyproxy

---
kind: identity
name: envoyproxy
description: Identity for the workload "envoyproxy" used to grant access to the envoy-config secret

---
kind: policy
name: envoyproxy
description: Allow the workload to use the secret envoy-config
bindings:
  - permissions:
      - reveal
    principalLinks:
      - //gvc/envoyproxy/identity/envoyproxy
targetKind: secret
targetLinks:
  - //secret/envoy-config

---
kind: workload
name: envoyproxy
description: envoyproxy
spec:
  type: serverless
  containers:
    - name: envoy
      args:
        # base_id must be changed so it doesn't conflict with the Control Plane provided proxy
        - '--base-id'
        - '1'
        - '-c'
        - /config/envoy.yaml
      cpu: 250m
      image: 'envoyproxy/envoy:v1.27.0'
      inheritEnv: false
      memory: 128Mi
      ports:
        - number: 8080
          protocol: http
      readinessProbe:
        failureThreshold: 3
        httpGet:
          httpHeaders: []
          path: /health
          port: 8080
          scheme: HTTP
      volumes:
        # maps the envoy-config secret to a file read by envoyproxy at startup in args above
        - path: /config/envoy.yaml
          uri: 'cpln://secret/envoy-config'
  defaultOptions:
    autoscaling:
      maxConcurrency: 1000
      maxScale: 5
      metric: cpu
      minScale: 2
      scaleToZeroDelay: 300
      target: 80
    capacityAI: false
  firewallConfig:
    external:
      inboundAllowCIDR:
        - 0.0.0.0/0
      outboundAllowCIDR:
        - 0.0.0.0/0
  identityLink: //identity/envoyproxy

---
kind: secret
name: envoy-config
description: envoy-config
type: opaque
data:
  encoding: plain
  payload: |-
    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address: { address: 0.0.0.0, port_value: 8080 }
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: auto
                    stat_prefix: ingress_http
                    access_log:
                    - name: envoy.access_loggers.stdout
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                    http_filters:
                    - name: envoy.filters.http.router
                      typed_config:
                        "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: health
                          domains: ["*"]
                          routes:
                            - match:
                                prefix: "/health"
                              direct_response:
                                status: 200

                            # route to the notes workload
                            - match:
                                safe_regex:
                                  google_re2: {}
                                  regex: "^\/v1\/blog\/\\w+\/notes.*"
                              route:
                                cluster: notes
                                # must rewrite host for internal routing
                                auto_host_rewrite: true
                                timeout: 2s
                            
                            # route to the addcomments workload (POST)
                            - match:
                                headers:
                                - name: :method
                                  string_match:
                                    exact: POST
                                safe_regex:
                                  google_re2: {}
                                  regex: "^\/v1\/blog\/\\w+\/comments.*"
                              route:
                                cluster: addcomments
                                # must rewrite host for internal routing
                                auto_host_rewrite: true
                                timeout: 2s

                            # route to the addcomments workload (GET)
                            - match:
                                headers:
                                - name: :method
                                  string_match:
                                    exact: GET
                                safe_regex:
                                  google_re2: {}
                                  regex: "^\/v1\/blog\/\\w+\/comments.*"
                              route:
                                cluster: getcomments
                                # must rewrite host for internal routing
                                auto_host_rewrite: true
                                timeout: 2s
                          
                            # route all other requests
                            - match:
                                prefix: "/"
                              route:
                                cluster: default
                                # must rewrite host for internal routing
                                auto_host_rewrite: true
                                timeout: 2s
      clusters:
        - name: notes
          connect_timeout: 5s
          type: logical_dns
          http2_protocol_options: {}
          lb_policy: round_robin
          load_assignment:
            cluster_name: cluster_0
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          # accessable internally because notes allows access from envoyproxy in the firewall
                          address: notes.envoyproxy.cpln.local
                          port_value: 8080
        - name: addcomments
          connect_timeout: 5s
          type: logical_dns
          http2_protocol_options: {}
          lb_policy: round_robin
          load_assignment:
            cluster_name: cluster_0
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          # accessable internally because addcomments allows access from envoyproxy in the firewall
                          address: addcomments.envoyproxy.cpln.local
                          port_value: 8080
        - name: getcomments
          connect_timeout: 5s
          type: logical_dns
          http2_protocol_options: {}
          lb_policy: round_robin
          load_assignment:
            cluster_name: cluster_0
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          # accessable internally because getcomments allows access from envoyproxy in the firewall
                          address: getcomments.envoyproxy.cpln.local
                          port_value: 8080
        - name: default
          connect_timeout: 5s
          type: logical_dns
          http2_protocol_options: {}
          lb_policy: round_robin
          load_assignment:
            cluster_name: cluster_0
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          # accessable internally because default allows access from envoyproxy in the firewall
                          address: default.envoyproxy.cpln.local
                          port_value: 8080
---
kind: workload
name: notes
description: notes
spec:
  type: serverless
  containers:
    - name: httpbin
      cpu: 50m
      env:
        - name: TARGET
          value: $(CPLN_WORKLOAD)
      image: gcr.io/knative-samples/helloworld-go
      memory: 128Mi
      ports:
        - number: 8080
          protocol: http
      readinessProbe:
        httpGet:
          path: /
          port: 8080
          scheme: HTTP
  firewallConfig:
    internal:
      inboundAllowType: workload-list
      # allow access from envoyproxy internally
      inboundAllowWorkload:
        - //gvc/envoyproxy/workload/envoyproxy
---
kind: workload
name: addcomments
description: addcomments
spec:
  type: serverless
  containers:
    - name: httpbin
      cpu: 50m
      env:
        - name: TARGET
          value: $(CPLN_WORKLOAD)
      image: gcr.io/knative-samples/helloworld-go
      memory: 128Mi
      ports:
        - number: 8080
          protocol: http
      readinessProbe:
        httpGet:
          path: /
          port: 8080
          scheme: HTTP
  firewallConfig:
    internal:
      inboundAllowType: workload-list
      # allow access from envoyproxy internally
      inboundAllowWorkload:
        - //gvc/envoyproxy/workload/envoyproxy
---
kind: workload
name: getcomments
description: getcomments
spec:
  type: serverless
  containers:
    - name: httpbin
      cpu: 50m
      env:
        - name: TARGET
          value: $(CPLN_WORKLOAD)
      image: gcr.io/knative-samples/helloworld-go
      memory: 128Mi
      ports:
        - number: 8080
          protocol: http
      readinessProbe:
        httpGet:
          path: /
          port: 8080
          scheme: HTTP
  firewallConfig:
    internal:
      inboundAllowType: workload-list
      # allow access from envoyproxy internally
      inboundAllowWorkload:
        - //gvc/envoyproxy/workload/envoyproxy
---
kind: workload
name: default
description: default
spec:
  type: serverless
  containers:
    - name: httpbin
      cpu: 50m
      env:
        - name: TARGET
          value: $(CPLN_WORKLOAD)
      image: gcr.io/knative-samples/helloworld-go
      memory: 128Mi
      ports:
        - number: 8080
          protocol: http
      readinessProbe:
        httpGet:
          path: /
          port: 8080
          scheme: HTTP
  firewallConfig:
    internal:
      inboundAllowType: workload-list
      # allow access from envoyproxy internally
      inboundAllowWorkload:
        - //gvc/envoyproxy/workload/envoyproxy